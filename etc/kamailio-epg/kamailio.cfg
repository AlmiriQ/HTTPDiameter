#!KAMAILIO
#
# This config file implements an Online-Charging-Server
#     - web: http://www.kamailio.org
#     - git: http://github.com/kamailio/kamailio
#
# Refer to the Core CookBook at http://www.kamailio.org/dokuwiki/doku.php
# for an explanation of possible statements, functions and parameters.
#
# Direct your questions about this file to: <sr-users@lists.kamailio.org>.
#
# For more information about the various parameters, functions and statements
# try http://sip-router.org/wiki/ .
#

##import_file "ocs.cfg"

####### Defined Values #########
# *** Value defines - IDs used later in config

# - flags
#	FLT_ - per transaction (message) flags
#	FLB_ - per branch flags


####### Global Parameters #########

#!ifdef WITH_DEBUG
debug=4
log_stderror=yes
#!else
debug=0
log_stderror=no
#!endif

debug=2
log_stderror=yes

memdbg=5
memlog=5

log_stderror=no
sip_warning=no

rundir="/run/kamailio"

user_agent_header="User-Agent: TelcoSuite OCS"
server_header="Server: TelcoSuite OCS"

/* comment the next line to enable the auto discovery of local aliases
   based on reverse DNS on IPs (default on) */
auto_aliases=no

check_via=no    # (cmd. line: -v)
dns=no          # (cmd. line: -r)
rev_dns=no      # (cmd. line: -R)

listen=tcp:198.19.0.200:8000

# Do SRV-Loadbalancing:
dns_srv_lb=no
# Always: Also try IPv6:
dns_try_ipv6=no
# Always prefer IPv6:
dns_cache_flags=6
# DNS-Based failover
use_dns_failover = on
# Query NAPTR-Records as well:
dns_try_naptr=no

http_reply_parse=yes
tcp_accept_no_cl=yes

children=3
log_name="[Charging]"

system.shutdownmode = 0 desc "System shutdown mode"
system.service = "Online-Charging-Server" desc "Function of this server"

# ------------------ module loading ----------------------------------
##mpath="/usr/lib64/kamailio/modules_k/:/usr/lib64/kamailio/modules/:/usr/local/lib/kamailio/modules/"
# (we try both the lib64 and the lib directory)
loadmodule "tm"
loadmodule "cdp"
loadmodule "cdp_avp"
#loadmodule "ims_ocs"
loadmodule "xlog"
loadmodule "pv"
loadmodule "cfgutils"
loadmodule "textops"
loadmodule "ctl"
loadmodule "sl"
loadmodule "kex"
loadmodule "corex"
loadmodule "sctp"
loadmodule "json"

loadmodule "http_client"
modparam("http_client", "httpcon", "python=>http://emilpedik.ru:8090/")

loadmodule "xhttp"
#modparam("xhttp", "url_match", "^/")

# ----- ctl params -----
modparam("ctl", "binrpc", "unix:/run/kamailio/kamailio_ctl")

# ----- cdp params -----
modparam("cdp","config_file", "/etc/kamailio/ocs.xml")

loadmodule "ims_diameter_server"

route {
	# Do nothing, we only do Diameter requests
	drop();
	exit;
}

#event_route[ocs:ccr-orig] {
#	xlog("Session-Case: Originating\n");
#	xlog("----------------------------------------\n");
#	if (is_method("INVITE")) {
#		xlog("START - Request\n");
#	} else if (is_method("UPDATE")) {
#		xlog("INTERIM - Request\n");
#	} else if (is_method("BYE")) {
#		xlog("STOP - Request\n");
#	}
#	xlog("----------------------------------------\n");
#	xlog("From:               $fu\n");
#	xlog("To:                 $ru\n");
#	#xlog("Call-ID:            $ci\n");
#	#xlog("Requested Units:    $hdr(P-Requested-Units)\n");
#	#xlog("Used Units:         $hdr(P-Used-Units)\n");
#	#log("Access Network:     $hdr(P-Access-Network-Info)\n");
#	#xlog("Service Identifier: $hdr(P-Service-Identifier)\n");
#    if( $fu == "tel:79001234567") {
#        ccr_result("2001", "600", "0");
#    } else if( $fu == "tel:79001234568") {
#        ccr_result("2001", "0", "10240");
#    } else {
#        ccr_result("3003", "0", "0");
#    }
#}

#event_route[ocs:ccr-term] {
#	xlog("Session-Case: Terminating\n");
#	xlog("----------------------------------------\n");
#	if (is_method("INVITE")) {
#		xlog("START - Request\n");
#	} else if (is_method("UPDATE")) {
#		xlog("INTERIM - Request\n");
#	} else if (is_method("BYE")) {
#		xlog("STOP - Request\n");
#	}
#	xlog("----------------------------------------\n");
#	xlog("From:               $fu\n");
#	xlog("To:                 $ru\n");
#	xlog("Call-ID:            $ci\n");
#	xlog("Requested Units:    $hdr(P-Requested-Units)\n");
#	xlog("Used Units:         $hdr(P-Used-Units)\n");
#	xlog("Access Network:     $hdr(P-Access-Network-Info)\n");
#	xlog("Service Identifier: $hdr(P-Service-Identifier)\n");
#
#	ccr_result("2001", "600", "0");
#}

#event_route[xhttp:request] {
#    xhttp_reply("200", "OK", "text/html",
#        "<html><body>OK - [$si:$sp]</body></html>");
#}

event_route[xhttp:request] {
    #$var(json_data) = $(rb{json.parse,json_data});
    #$var(json_data) = $(rb{json.parse, $rb});
    #xlog("L_INFO", "!!!");
    #if ($rm == "POST") {
    $var(Custom-Data) = $(rb{json.parse,Custom-Data});
	if($var(Custom-Data) != $null) {	xlog("L_INFO", "$ci|log|custom data: $var(Custom-Data) from Request: $rb");
    }
        # Parse JSON data from POST request headers
        # $var(jsondata) = $(rb{json.parse,jsondata});
        #$var(Custom-Data) = $(rb{json.parse,Custom-Data});
	#if($var(Custom-Data) != $null) {
	#	xlog("L_INFO", "$ci|log|custom data: $var(Custom-Data) from Request: $rb");
        #}
     xhttp_reply("200", "OK", "text", "$var(json_data)+$rb");
	# Forward JSON data to OCS via Diameter protocol
        #$avp(jsondata) = $var(jsondata);
        #diameter_send("ocs1.hackaton.uisi.ru", "hackaton.uisi.ru", "app");
    #}
}

event_route[diameter:request] {
	$var(res) = http_connect("python", "/", "application/json", "$diameter_request", "$var(response)");
	if ($var(res) == 200) {
		$diameter_response = $var(response);
	}
# else {
#		update_stat("diameter_failed_requests", "+1");
#	}
}
